"use client";

import { useState, useEffect } from "react";

import Card from "@/components/Card";
import FormField from "@/components/FormField";
import Loader from "@/components/Loader";

interface Post {
  _id: string;
  name: string;
  prompt: string;
  photo: string;
}

const useDebouncedSearch = (searchQuery: string): string => {
  const [debouncedQuery, setDebouncedQuery] = useState<string>("");

  useEffect(() => {
    const timeout = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 500);

    return () => clearTimeout(timeout);
  }, [searchQuery]);

  return debouncedQuery;
};

interface RenderCardsProps {
  posts: Post[] | null;
  emptyStateMessage: string;
}

const RenderCards = ({ posts, emptyStateMessage }: RenderCardsProps) => {
  if (posts?.length && posts.length > 0)
    return posts.map((post) => <Card key={post._id} {...post} />);

  return (
    <h2 className="mt-5 font-bold text-slate-600 text-xl uppercase">
      {emptyStateMessage}
    </h2>
  );
};

export default function Home() {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPosts, setAllPosts] = useState<Post[] | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [filteredPosts, setFilteredPosts] = useState<Post[] | null>(null);

  const debouncedSearchQuery = useDebouncedSearch(searchQuery);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch(
          "https://visio-kqqa.onrender.com/api/v1/posts",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        if (response.ok) {
          const result = await response.json();
          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  useEffect(() => {
    const postsMatchingQuery = allPosts?.filter(
      (post) =>
        post.prompt
          .toLowerCase()
          .includes(debouncedSearchQuery?.toLowerCase()) ||
        post.name.toLowerCase().includes(debouncedSearchQuery?.toLowerCase())
    );

    setFilteredPosts(postsMatchingQuery ?? null);
  }, [allPosts, debouncedSearchQuery]);

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-slate-900 text-4xl">
          The Community Showcase
        </h1>
        <p className="text-slate-600 text-medium max-w-xl pt-2">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI.
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search"
          type="text"
          name="search"
          handleChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search for prompts"
          value={searchQuery}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {debouncedSearchQuery && (
              <h2 className="font-medium text-slate-600 text-xl mb-3">
                Showing results for{" "}
                <span className="text-slate-900">{debouncedSearchQuery}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {debouncedSearchQuery ? (
                <RenderCards
                  posts={filteredPosts}
                  emptyStateMessage="No search results found"
                />
              ) : (
                <RenderCards
                  posts={allPosts}
                  emptyStateMessage="No posts found"
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
}
